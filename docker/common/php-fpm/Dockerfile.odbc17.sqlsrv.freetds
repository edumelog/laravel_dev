########################################################
#        PHP 8.4 - FPM para Laravel - Com SQLSRV       #
#  Inclui: PHP-FPM, Redis, PostgreSQL, MySQL, Xdebug   #
#  Suporte ao SQL Server via ODBC 17 + sqlsrv + FreeTDS#
#  Ferramentas extra: nano, ping, telnet               #
########################################################

# Stage 1: Build environment and Composer dependencies
FROM php:8.4-fpm AS builder

# Adiciona o repositório Microsoft para ODBC 17
RUN apt-get update && apt-get install -y gnupg2 curl \
    && curl -sSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o /usr/share/keyrings/microsoft-prod.gpg \
    && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-prod.gpg] https://packages.microsoft.com/debian/12/prod bookworm main" > /etc/apt/sources.list.d/mssql-release.list

# Instala dependências do sistema, incluindo FreeTDS e extensões PHP
RUN apt-get update && ACCEPT_EULA=Y apt-get install -y --no-install-recommends \
    msodbcsql17 \
    unixodbc-dev \
    unzip \
    nano \
    iputils-ping \
    telnet \
    libpq-dev \
    libonig-dev \
    libssl-dev \
    libxml2-dev \
    libcurl4-openssl-dev \
    libicu-dev \
    libzip-dev \
    freetds-dev \
    freetds-bin \
    libsybdb5 \
    libedit-dev \
    zlib1g-dev \
    git \
    && docker-php-ext-install -j$(nproc) \
    pdo_mysql \
    pdo_pgsql \
    pgsql \
    opcache \
    intl \
    zip \
    bcmath \
    soap \
    pdo_dblib \
    && pecl install redis sqlsrv pdo_sqlsrv \
    && docker-php-ext-enable redis sqlsrv pdo_sqlsrv \
    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Configuração otimizada do FreeTDS
RUN mkdir -p /etc/freetds && echo "\
[global] \n\
    tds version = 7.1 \n\
    client charset = UTF-8 \n\
    text size = 64512 \n\
    dump file = /tmp/freetds.log \n\
    debug flags = 0x4fff \n\
    port = 1433 \n\
    instance = default \n\
\n\
[sqlserver] \n\
    host = 10.1.5.21 \n\
    port = 1433 \n\
    tds version = 7.1 \n" > /etc/freetds/freetds.conf

# Força OpenSSL a aceitar algoritmos legados (SECLEVEL=0)
RUN echo 'openssl_conf = openssl_init\n\n[openssl_init]\nssl_conf = ssl_sect\n\n[ssl_sect]\nsystem_default = system_default_sect\n\n[system_default_sect]\nMinProtocol = TLSv1\nCipherString = DEFAULT:@SECLEVEL=0' > /etc/ssl/openssl_legacy.cnf \
    && echo 'export OPENSSL_CONF=/etc/ssl/openssl_legacy.cnf' >> /etc/profile
ENV OPENSSL_CONF=/etc/ssl/openssl_legacy.cnf

# Define o diretório de trabalho no container
WORKDIR /var/www

# Copia o código completo da aplicação Laravel
COPY . /var/www

# Instala o Composer e as dependências PHP do projeto
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \
    && composer install --no-dev --optimize-autoloader --no-interaction --no-progress --prefer-dist

# Stage 2: Ambiente de produção
FROM php:8.4-fpm AS production

# Reinstala repositório Microsoft
RUN apt-get update && apt-get install -y gnupg2 curl \
    && curl -sSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o /usr/share/keyrings/microsoft-prod.gpg \
    && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-prod.gpg] https://packages.microsoft.com/debian/12/prod bookworm main" > /etc/apt/sources.list.d/mssql-release.list

# Instala apenas bibliotecas necessárias em produção
RUN apt-get update && ACCEPT_EULA=Y apt-get install -y --no-install-recommends \
    msodbcsql17 \
    nano \
    iputils-ping \
    telnet \
    libpq-dev \
    libicu-dev \
    libzip-dev \
    libfcgi-bin \
    procps \
    freetds-dev \
    freetds-bin \
    libsybdb5 \
    libedit-dev \
    zlib1g-dev \
    && docker-php-ext-install pdo_dblib \
    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copiar configuração do FreeTDS
COPY --from=builder /etc/freetds/freetds.conf /etc/freetds/freetds.conf

# Força OpenSSL a aceitar algoritmos legados (SECLEVEL=0)
RUN echo 'openssl_conf = openssl_init\n\n[openssl_init]\nssl_conf = ssl_sect\n\n[ssl_sect]\nsystem_default = system_default_sect\n\n[system_default_sect]\nMinProtocol = TLSv1\nCipherString = DEFAULT:@SECLEVEL=0' > /etc/ssl/openssl_legacy.cnf \
    && echo 'export OPENSSL_CONF=/etc/ssl/openssl_legacy.cnf' >> /etc/profile
ENV OPENSSL_CONF=/etc/ssl/openssl_legacy.cnf

# Instala o script de healthcheck para o php-fpm
RUN curl -o /usr/local/bin/php-fpm-healthcheck \
    https://raw.githubusercontent.com/renatomefi/php-fpm-healthcheck/master/php-fpm-healthcheck \
    && chmod +x /usr/local/bin/php-fpm-healthcheck

# Copia o script de entrada (entrypoint) do PHP-FPM
COPY ./docker/production/php-fpm/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Copia estrutura inicial do diretório de armazenamento
COPY ./storage /var/www/storage-init

# Copia extensões PHP do estágio builder
COPY --from=builder /usr/local/lib/php/extensions/ /usr/local/lib/php/extensions/
COPY --from=builder /usr/local/etc/php/conf.d/ /usr/local/etc/php/conf.d/
COPY --from=builder /usr/local/bin/docker-php-ext-* /usr/local/bin/

# Usa a configuração recomendada do PHP para produção
RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"

# Habilita status do PHP-FPM
RUN sed -i '/\[www\]/a pm.status_path = /status' /usr/local/etc/php-fpm.d/zz-docker.conf

# Copia o código da aplicação
COPY --from=builder /var/www /var/www

# Define o diretório de trabalho
WORKDIR /var/www

# Permissões adequadas
RUN chown -R www-data:www-data /var/www

# Executa como usuário não privilegiado
USER www-data

# Define o comando padrão
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
EXPOSE 9000
CMD ["php-fpm"]

# Stage 3: Imagem para desenvolvimento
FROM production AS development

# Argumentos para configurar o Xdebug
ARG XDEBUG_ENABLED=true
ARG XDEBUG_MODE=develop,coverage,debug,profile
ARG XDEBUG_HOST=host.docker.internal
ARG XDEBUG_IDE_KEY=DOCKER
ARG XDEBUG_LOG=/dev/stdout
ARG XDEBUG_LOG_LEVEL=0

USER root

# Instala e configura o Xdebug se ativado
RUN if [ "$XDEBUG_ENABLED" = "true" ]; then \
    pecl install xdebug && \
    docker-php-ext-enable xdebug && \
    echo "xdebug.mode=$XDEBUG_MODE" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \
    echo "xdebug.idekey=$XDEBUG_IDE_KEY" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \
    echo "xdebug.log=$XDEBUG_LOG" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \
    echo "xdebug.log_level=$XDEBUG_LOG_LEVEL" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \
    echo "xdebug.client_host=$XDEBUG_HOST" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \
    echo "xdebug.start_with_request=yes" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini ; \
fi

# Força OpenSSL a aceitar algoritmos legados (SECLEVEL=0)
RUN echo 'openssl_conf = openssl_init\n\n[openssl_init]\nssl_conf = ssl_sect\n\n[ssl_sect]\nsystem_default = system_default_sect\n\n[system_default_sect]\nMinProtocol = TLSv1\nCipherString = DEFAULT:@SECLEVEL=0' > /etc/ssl/openssl_legacy.cnf \
    && echo 'export OPENSSL_CONF=/etc/ssl/openssl_legacy.cnf' >> /etc/profile
ENV OPENSSL_CONF=/etc/ssl/openssl_legacy.cnf

# Criação de usuário com UID/GID customizados
ARG UID=1000
ARG GID=1000

RUN if getent group ${GID}; then \
      group_name=$(getent group ${GID} | cut -d: -f1); \
      useradd -m -u ${UID} -g ${GID} -s /bin/bash www; \
    else \
      groupadd -g ${GID} www && \
      useradd -m -u ${UID} -g www -s /bin/bash www; \
      group_name=www; \
    fi

# Atualiza o usuário usado pelo PHP-FPM
RUN sed -i "s/user = www-data/user = www/g" /usr/local/etc/php-fpm.d/www.conf && \
    sed -i "s/group = www-data/group = $group_name/g" /usr/local/etc/php-fpm.d/www.conf

# Define diretório de trabalho
WORKDIR /var/www

# Copia o script de entrada do ambiente de desenvolvimento
COPY ./docker/development/php-fpm/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Executa como usuário não privilegiado
USER www-data

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
EXPOSE 9000
CMD ["php-fpm"]
